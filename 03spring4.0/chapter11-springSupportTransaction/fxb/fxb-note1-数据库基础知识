数据库基础知识：
    1.数据库事务基础知识
        数据库事务有严格的定义：他必须同时满足4个特性：
            1.原子性：组成事务的多个数据库操作时一个不可分割的原子单元，只有所有的操作执行成功，整个事务才会提交。
            2.一致性：事务操作成功后，数据库所处的状态和它的业务规则是一致的，数据不会被破坏。
                如：A账户转账100元到B账户，不管成功与否，A账户和B账户的存款总额是不变的。
            3.隔离性：在并发数据操作时，不同的事务拥有各自的数据空间，他们的操作不会对对方产生干扰。
            4.持久性：一旦事务提交成功后，事务中所有的数据操作都必须被持久化到数据库中。
        在这些事务特性中，数据一致性是最终目标，其他特性都是为达到这个目标而采取的措施，要求和手段。
    2. 数据并发的问题：
        1.脏读：
            A事务读取B事务尚未提交的更改数据，并在这个数据的基础上进行操作。
            如果恰巧B事务回滚，那么A事务读到的数据根本是不被承认的。
            如图1取款事务和转账事务并发时引发的脏读场景
            在Oracle数据库中，不会发生脏读的情况。
        2. 不可重复读
            A事务读取了B事务已经提交的更改数据。A事务在两次读取的数据不一致。
            如图2图2不可重复读
        3. 幻象读
            A事务读取B事务提交的新增数据，这时A事务将出现幻想读的问题。
            如图3幻象读

           幻象读和不可重复读是两个容易混淆的概念，前者是指读到了其他已经提交事务的新增数据，而后者是读到了已经提交事务的更改数据(更改和删除)
        采取的策略不同：
            防止读到更改的数据，只需对操作的数据添加行级锁，阻止操作中的数据发生变化。
            防止读到新增的数据，往往是需要添加表级锁-整张表锁定，防止新增数据(Oracle使用多版本数据的方式实现)

        4.第一类丢失更新：
            A事务撤销时，把已经提交的B事务的更新数据覆盖了。
            如图4第一类丢失更新
        5. 第二类丢失更新：
            A事务覆盖B事务已经提交的数据，造成B事务所做操作丢失。
            如图5第二类丢失更新
数据库锁机制：
    介绍Oracle的几种锁机制：
        行共享锁：一般通过Select for update 语句隐式获取行共享锁。在Oracle用户中也可以通过Lock table in row Share mode语句显式获得行共享锁定。
        行独占锁定：通过insert，update，delete语句隐式获取，或者通过一条lock table in row exclusive mode 语句获取。
            可防止其他会话获取共享锁定，共享行独占锁定或者独占锁定。
        表共享锁定：通过lock table in share mode语句获取。
            可防止其他会话获取行独占锁定(insert,update,delete)，或者防止其他表共享独占锁或者表独占锁定(insert,update,delete),
            或者防止其他表共享行独占锁定或表独占锁定，但它允许在表中拥有多个行共享和表共享锁定。
            该锁定可以让会话具有对表事务级一致性访问。
        表共享行独占锁定：
            通过lock table in share row exclusive mode语句显式获取。
            这种锁定可以防止其他会话获取一个表共享，行独占或者表独占锁定，但允许其他行共享锁定。
        表独占锁定：
            通过lock table in exclusive mode语句显式获取。
                可以防止其他会话对表的任何其他锁定。
事务隔离级别：
    如图6事务隔离级别

1.5 JDBC对事务的支持
    并非所有的数据库都是支持事务，即使支持事务的数据库也并非支持所有的事务隔离级别。
    用户可以通过Connection.getMetaData()方法获取DataBaseMetaData对象。并通过该对象的supportsTransactions()
 supportsTransactionIsolactionLevel(int level)方法查看底层数据库的事务支持情况。
    Connection默认情况下是自动提交事务的，每条执行的Sql都对应一个事务。
        多条sql组成的事务执行时必须先通过Connection.setAutoCommit(false)阻止Connection自动提交。
        并通过Connection.setTransactionIsolation()设置事务的隔离级别。
        通过Connection.commit()提交事务，通过Connection.rollback() 回滚事务。




























