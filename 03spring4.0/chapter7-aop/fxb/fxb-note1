AOP
    aop：aspect oriented Programing的简称。
    面向切面编程。


AOP术语：
    连接点：程序执行的某个特定位置。。一个类或一段程序代码拥有一些具有边界性质的特定点。
        Spring仅支持方法的连接点。即仅能在方法调用前，方法调用后，方法抛出异常时及方法调用前后这些程序执行点织入增强。
        连接点由两个信息确定：
            一是用方法表示的程序执行点。
            二是相对位置表示的方位。
    切点：每个程序类都拥有多个连接点，如一个拥有两个方法的类，这两个方法都是连接点。
        即连接点是程序类中客观存在的事物。AOP通过切点定位特定的连接点。
        栗子：连接点相当于数据库中的记录，而切点相当于查询条件。
            注意：切点和连接点不是一对一的关系，一个切点可以匹配多个链接点。
        Spring，通过org.springframework.aop.Poincut接口进行描述。它使用类和方法作为连接点的查询条件，
        Spring Aop的规则解析引擎负责解析切点所设定的查询条件，找到对应的连接点。
    3. 增强(Advice)
        增强是织入目标类连接点上的一段程序代码。
    4. 目标对象(Target)：
        增强逻辑的织入目标类。
    5. 引介(Introduction)
        引介是一种特殊的增强，它为类添加一些属性和方法。
        即使一个业务类原本没有实现某个接口，通过AOP的引介功能，也可以动态地为该业务类添加接口的实现逻辑，
        让业务类成为这个接口的实现类。
    6.织入(weaving)：
        将增强添加到目标类的具体连接点上的过程。
        AOP 有三种织入方式：
            编译期织入，这要求使用特殊的java编译器。
            类装载期织入，要求使用特殊的类装载器。
            动态代理织入,在运行期为目标类添加增强生成子类的方式。
        Spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。
    7. 代理(Proxy)
        一个类被AOP织入增强后，就产生了一个结果类，它是融合了原类和增强逻辑的代理类。
        根据不同的代理方式，代理类既可能是和原类具有相同接口的类，也可能是原类的子类，所以可以采用与调用原类相同的方式调用代理类。
    8. 切面(Aspect)
        切面由切点和增强(引介)组成。它既包括横切逻辑的定义，也包括连接点的定义。
        Spring AOP 就是负责实施切面的框架，它将切面所定义的横切逻辑织入切面所指定的连接点中。

    AOP的工作重心在于如何将增强应用于目标对象的连接点上，
        第一：如何通过切点和增强定位到连接点上。
        第二：如何在增强中编写切面的代码。

7.1.3  AOP实现者：
    AOP工具的设计目标是把横切的问题(如性能监视，事务管理)模块化。
    1.AspectJ是语言级别的AOP实现。AspectJ扩展了java语言，定义了AOP语法，能够在编译期提供横切代码的织入。
        所以它有一个专门的编译器用来生成遵守java字节编码规范的Class文件。
    2.AspectWerkz：
    3. JBoss AOP
    4. Spring AOP
        不需要专门的编译过程，也不需要特殊的类装载器。它在运行期通过代理方式向目标类织入增强代码。
        它侧重于提供一种和Spring IoC容器整合的AOP实现。用以解决企业级开发中的常见问题。

    在Spring中可以无缝的将Spring AOP，IoC和AspectJ整合在一起。


7.2
    Spring AOP 使用动态代理技术在运行期织入增强的代码。
    Spring AOP 使用了两种代理机制。
        基于JDK的动态代理  只提供接口的代理，不支持类的代理、。
        基于CGLib的动态代理。

    7.2.1  JDK动态代理
        jdk 1.3 ，java就提供了动态代理技术。允许开发者在运行期创建接口的代理实例。
        JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。
        InvocationHandler：可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态的将横切逻辑和业务逻辑编织在一起。
        Proxy利用InvocationHandler动态创建一个符合某一个接口的实例，生成目标类的代理对象。
    7.2.2  CGLib 动态代理
        CGLib采用底层的字节码结束，可以为一个类创建子类，在子类中采用方法拦截的技术拦截所有父类方法的调用并顺势织入横切逻辑。
        栗子 com.fxb.cglib包下。
    7.2.4 AOP联盟
        AOP实现的标准。


   7.3  创建增强类：
        Spring使用增强类定义横切逻辑，同时由于Spring只支持方法连接点，增强还包括在方法的哪一点加入横切代码的方位信息。
            所以增强既包括横切逻辑，又包括部分连接点的信息。
        7.3.1 增强类型：
            AOP联盟为增强定义了org.aopalliance.aop.Advice接口，Spring支持五种类型的增强。

            1.前置增强：org.springframework.aop.BeforeAdvice. MethodBeforeAdvice是目前可用的前置增强，表示目标方法执行前实施增强。
            2.后置增强：org.springframework.aop.AfterReturnAdvice. 在目标方法执行后实施增强。
            3.环绕增强：org.aopalliance.intercept.MethodInterceptor。表示在方法执行前后实施增强。
            4.异常抛出增强：org.springframework.aop.ThrowsAdvice  在目标方法抛出异常后实施增强
            5.引介增强：org.springframework.aop.IntroductionInterceptor 在目标类中添加一些新的方法和属性。

        前置增强：栗子：com.fxb.beforeAdvice
    Spring定义了org.springframework.aop.framework.AopProxy接口，并提供了两个final类型的实现类。
        Cglib2AopProxy,JdkDynamicAopProxy
       其中Cglib2AopProxy使用CGLib动态代理技术创建代理，而JDKDynamicAopProxy使用JDK动态代理技术创建代理。
       如果通过ProxyFactory的setInterfaces(Class[] interfaces)方法指定目标接口进行代理，则ProxyFactory使用JDKDynamicAopProxy。
       如果是针对类的代理，则使用Cglib2AopProxy.
       此外，还可以通过ProxyFactory的setOptimize(true)方法让ProxyFactory启动优化方式让ProxyFactory启动优化代理方式，这样针对接口的代理也会使用Cglib2AopProxy.

        后置增强：com.fxb.afterAdvice
        环绕增强：com.fxb.springConfiguration
        异常抛出增强：
            最适合的应用场景是事务管理，当参与事务的某个DAO发生异常时，事务管理器就必须回滚事务。
            com.fxb.springConfiguration
        引介增强：
            一种特殊的增强类型，他不是不在目标方法周围织入增强，而是为目标类创建新的方法和属性，所以引介增强的连接点是类级别的。
            通过引介增强，可以为目标类添加一个接口的实现，即原来目标类未实现某个接口，通过引介增强可以为目标类创建实现某接口的代理。

            Spring定义了引介增强接口IntroductionInterceptor。
            该接口没有定义任何方法，Spring为该接口提供了DelegatingIntroductionInterceptor实现类。
            一般情况下，通过扩展该实现类定义自己的引介增强类。

7.4  创建切面：
    如果我们希望有选择的织入目标类的某些特定方法中，就需要使用切点进行目标连接点的定位。
    描述连接点是进行AOP编程最主要的工作。
    增强提供了连接点方位信息，如织入到方法前面，后面等，而切点进一步描述了织入哪些类的哪些方法上。

    Spring通过org.springframework.aop.Pointcut接口描述切点。
    Pointcut由ClassFilter和MethodMatcher构成。
    他通过ClassFilter定位到某些特定类上，通过MethodMatcher定位奥某些特定方法上。这样Pointcut就拥有了描述某些类的特定方法的能力。

    ClassFilter 只定义了一个方法matches(Class clazz),其参数代表一个被检测类。该方法判别被检测的类是否匹配过滤条件。
    Spring支持两种方法匹配器：静态方法匹配器和动态方法匹配器。
        静态方法匹配器，仅对方法名签名(方法名和入参类型及顺序)进行匹配。
        动态方法匹配器，在运行期检查方法入参的值。

        静态匹配只会判别一次，动态方法匹配器在每次调用都会判断。
        方法匹配器的类型有isRuntime()方法的返回值决定，false代表静态方法匹配器，true表示动态方法匹配器。

    7.4.1 切点类型
        Spring提供了6种类型的切点。
        静态方法切点：
            org.springframework.aop.support.StaticMethodMatcherPointcut.是静态方法切点的抽象基类，
            默认情况下它匹配所有的类，StaticMethodMatcherPointcut包括两个主要的子类：
                NameMatchMethodPointcut和AbstractRegexpMethodPointcut，前者提供简单字符串匹配方法签名
                后者使用正则表达式匹配方法签名。
        动态方法切点：
             org.springframework.aop.support.DynamicMethodMatcherPointcut是动态方法切点的抽象基类。
             默认情况下它匹配所有类。
        注解切点：
            org.springframework.aop.support.annotation.AnnotationMatchingPointcut实现类表示注解切点。
            使用AnnotationMatchingPointcut支持在Bean中直接通过java5.0注解标签定义的切点。
        表达式切点：
            org.springframework.aop.support.ControlFlowPointcut实现类表示控制流程切点。
            ControlFlowPointcut是一种特殊的切点，他根据程序执行堆栈的信息查看目标方法是否由某一个方法直接或间接发起调用，
            以此判断是否为匹配的连接点。
        复合切点：
            org.springframework.aop.support.ComposablePointcut实现类是为创建多个切点而提供的方便操作类。
            它所有的方法都返回ComposablePointcut类，这样可以使用连接表达式对切点进行操作。
    7.4.2   切面类型
        Spring使用org.springframework.aop.Advisor接口表示切面的概念，
        一个切面同时包含横切代码和连接点信息。
        切面可以分为3类，一般切面，切点切面，引介切面。
            Advisor：代表一般切面，仅包含一个Advice。Advice本身就是一个简单的切面。它代表的是横切的连接点是所有目标类的所有方法。
            PointcutAdvisor：代表具体切点的切面，包含Advice和Pointcut两个类。
                这样就可以通过类，方法名及方法方位等信息灵活的定义切面的连接点，提供更具适用性的切面。
            IntroductionAdvisor：代表引介切面。
                引介切面是对应引介增强 的特殊的切面，它应用于类层面上，所以引介切点使用ClassFilter进行定义。

        PointcutAdvisor 有六个具体的实现类。
            ........

    7.4.3   静态普通方法名匹配切面： com.fxb.chapter6
    7.4.4   正则表达式方法匹配切面:com.fxb.chapter7
    7.4.5   动态切面：
        DynamicMethodMatcherPointcutAdvisor抽象类，在Spring2.0中以过期。
        可以使用DefaultPointcutAdvisor和DynamicMethodMatcherPointcut来完成相同的功能。

        Spring采用这样的机制：
            在创建代理时对目标类的每个连接点使用静态切点检查，如果仅通过静态切点检查就可以知道连接点是不匹配的。
            则在运行时就不再进行动态检查;
            如果静态切点检查是匹配的，则在运行时才进行动态切点检查。



























