
0.@SpringBootApplication：
    @Configuration，@EnableAutoConfiguration，@ComponentScan.由于这些注解都是一起起作用，spring boot提供了一个统一的注解
    ---@SpringBootApplication.
    @SpringBootApplication = （默认属性）@Configuration+@EnableAutoConfiguration+@ComponentScan

1.@Configuration：
    和@Bean搭配使用。使用这两个注解就可以创建一个简单的spring配置类。可以用来替代相应的xml配置文件
    <beans>
        <bean id = "car" class="com.test.Car">
            <property name="wheel" ref = "wheel"></property>
        </bean>
        <bean id = "wheel" class="com.test.Wheel"></bean>
    </beans>
    @Configuration的注解类标识这个类可以使用Spring IoC容器作为bean定义的来源。
    @Bean注解告诉Spring，一个带有@Bean的注解方法将返回一个对象，该对象应该被注册为在Spring应用程序上下文中的bean。
2、@EnableAutoConfiguration：
    能够自动配置spring的上下文，试图猜测和配置你想要的bean类，通常会自动根据你的类路径和你的bean定义自动配置。
3、@ComponentScan：
    会自动扫描指定包下的全部标有@Component的类，并注册成bean，当然包括@Component下的子注解@Service,@Repository,@Controller。

4.@Profiles
    Spring Profiles提供了一种隔离应用程序配置的方式，并让这些配置只能在特定的环境下生效。
    任何@Component或@Configuration都能被@Profile标记，从而限制加载它的时机。
5.@Value
    通过@value注解来读取application.properties里面的配置
6.@ExceptionHandler（Exception.class）：
    用在方法上面表示遇到这个异常就执行以下方法。
7.@ControllerAdvice：
    包含@Component。可以被扫描到。统一处理异常。
8.@PathVariable:
     路径变量。

