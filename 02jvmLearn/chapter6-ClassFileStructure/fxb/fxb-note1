类文件结构：
    Class类文件的结构：
        Class文件是一组以八位字节为基础单位的二进制流。各项数据项目严格按照书序紧凑地排列在class文件中，中间没有任何分隔符、
    这使得整个class文件中存储的内容几乎全部是程序运行的必要数据。，没有空隙存在。当遇到占用8位字节以上空间的数据项是，则会按照、
    高位在前的方式分割成若干8位字节进行存储。
        根据java虚拟机规范的规定，class文件格式采用一种类似于C语言结构体的伪结构来存储，这种伪结构只有两种数据类型：无符号数和表。
            无符号数：以u1，u2，u3，u4来分别代表一个字节，二个字节，四个字节，八个字节的符号数。无符号数可以用来描述数字，索引引用，数量值或者按照UTF-8编码构成字符串值。
            表：是由多个无符号数或者其他表作为数据项构成的符合数据类型，所有的表都习惯行的以"_info"结尾。表用于描述有层次关系的复合结构的数据，整个class文件本质上就是一张表。
         表由如表6-1所示的数据项构成。
        ***************  在表6-1中的数据项，无论是顺序还是数量，都是被严格限定的，哪个字节代表什么含义，长度是多少，先后顺序如何，都不允许改变。
    1 魔数与class文件的版本
        每个class文件的头4个字节称为魔数(magic Number)。作用是 用于确定这个文件是否为一个能够虚拟机接受的class文件。
    很多文件存储标准中都使用魔数来进行身份识别。比如gif，jpeg。Class文件的魔数值为0XCAFEBABE(咖啡宝贝)
        紧接着魔数的4个字节存储的是Class文件的版本号。从45开始。详见表6-2 Class文件的版本号
        第5和第6个字节是次版本号（minor Version）。
        第7和第8个字节是主版本号(Major Version).
    2.常量池：
        紧接着主次版本号之后的是常量池入口。常量池是class文件结构中其他项目关联最多的数据类型，也是占用class文件空间中最大的数据项目之一。
    同时他还是在Class文件中第一个出现的表类型数据项目。
        由于常量池中的数量不固定，所以在常量池的入口需要放置一项u2类型的数据。代表常量池容量计数值(从1开始)。
        常量池中主要存放两大类常量：
            字面量：文本字符串，被声明为final的常量值。
            符号引用：编译原理方面的概念。包含类和接口的全限定名，字段的名称和描述符，方法的名称和描述符三类常量。
        class文件中不会保存各个方法和字段的最终内存布局信息，因为这些字段和方法的符号引用不经过转换的话是无法直接被虚拟机使用的。
        当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析并翻译到具体的内存地址之中、

        常量池中的每一项常量都是一个表，共有11中结构不同的表数据结构，这11种表都有一个共同的特点，就是表开始的第一位是一个u1类型的标志位。
    代表当前这个常量属于那种常量类型，11中常量类型所代表的具体含义如表6-3 常量池的项目类型

        表6-6 常量池中11种数据类型的结构总表1
        表6-6 常量池中11种数据类型的结构总表2

    3. 访问标志：
        在常量池之后紧接着的2个字节代表是访问标志。用于识别一些类或接口层次的访问信息。包括以下信息：
            这个Class是类还是接口，是否定义为public类型，是否定义为abstract类型，
            如果是类的话，是否被声明为final，等等。
            具体的标志位以及标志含义见表6-7 访问标志
    4. 类索引 ，父类索引，与接口索引集合。
        类索引和父类索引都是一个u2类型的数据，接口索引集合是一组u2类型的数据的集合。Class文件中由这三项数据来确定这个类的继承关系。
        类索引用于确定这个类的全限定名，
        父类索引用于确定这个类的父类的全限定名。父索引只有一个。
        接口索引集合用来描述这个类实现了哪些接口。

    5. 字段表集合
        字段表(filed_info) 用于描述接口或者类中声明的变量。字段(filed)包括了类级变量或实例级变量，但是不包括方法内部声明的变量。
    包括的信息有 字段的作用域，是类级变量还是实例级变量，可变性，并发可见性(volatite修饰符，是否强制从主内存读出)，可否序列化(transient)字段数据类型(基本类型，对象，数组)，字段名称
    这些信息，各个修饰符都是布尔值，要么有，要么没有。

    6. 方法表集合
        见图6-11-12 方法表结构，方法访问标志。
        方法体中的代码存在方方法属性表集合中一个名为Code的属性里面，属性表作为Class文件格式中最具有扩展性的数据项目。
        如果父类方法在子类中没有被重写，方法表集合中就不会出现来自父类的方法信息。但是，可能会出现编译器自动添加的方法。构造方法
        重载方法，除了要与原方法名具有相同的简单的名称之外，还要求必须有一个与原方法不同的特征签名，特征签名就是一个方法中，各个参数在常量池中的字段符号引用的集合。
        因为返回值不会包含在特征签名之中，因此java语言中是无法仅仅依靠返回值的不同来对一个已有方法进行重载的。

    7. 属性表集合
        在Class文件，字段表，方法表中都可以携带自己的属性表集合，用于描述某些场景专有的信息。
        **详见表6-13 虚拟机规范预定义的属性；
        对于每个属性，它的名称需要从常量池中引用一个CONSTANT_Utf8_info类型的常量来表示。属性值的结构则是完全自定义的
        只需要说明属性值所占用的位数长度即可。
            ***见表6-14 属性表结构
        1.Code 属性
            java程序方法体里面的代码经过javac编译处理后，最终变为字节码指令存储在Code属性内。Code属性出现在方法表的属性集合中，
            但并非所有的方法都必须存在这个属性，譬如接口或抽象类中的方法。
            如果方法表中有Code属性存在。那么结构如表6-15 Code属性表的结构

            attribute_name_index 是一项指向CONSTANT_Utf8_info型常量的索引。
            max_stack 代表了操作数栈深度的最大值。
            max_locals 代表了局部变量表所需要的存储空间。单位是Slot。Slot是虚拟机为局部变量分配内存所使用的最小单位。
        对于byte，char，float，int，short，Boolean，reference和returnAddress等长度不超过32位的数据类型，每个局部变量占用1Slot。
        而double，long这种64位的数据类型则需要2个Slot来存放。
            code和code_length  用来存储java源程序编译后生成的字节码指令。
        code_length:字节码长度。
        code 用于存储字节码指令的一系列字节流。
        需要注意的是：code_length虽然是u4类型的长度值。理论上可以达到2^32-1 但是  虚拟机规范中显示了一个方法不能超过65535条字节码指令，否则，虚拟机将拒绝编译。
        一般不会出现这个问题，但是在编译复杂的jsp文件时，就可能出现这个问题。(我没遇到过)
            见demo1.Demo1.java

        2.显示异常处理表(异常表)集合：
            异常表的格式如表6-16 所示
            含义是：如果字节码从第start_pc行到第end_pc行之间(不含有end_pc)出现了类型为catch_type或者其他子类的异常(catch_type指向为一个CONSTANT_Class_info类型常量的索引)，
        则跳转到handler_pc行继续处理。当catch_type=0时，任何的异常情况都需要跳转到handler_pc进行处理。
            异常表实际上是java代码的一部分，编译器使用异常表而不是简单的跳转命令来实现java异常及finally处理机制。
        3.Exceptions属性：
            作用是列举方法中可能抛出的受查异常。也就是方法描述时在throws关键字后面的列举的异常。
            如图：表6-17
        4. LineNumberTable 属性：
            用于描述Java源代码行号与字节码行号之间的对应关系。
            可通过javac -g:none或-g:lines来取消或要求生成这项信息。
            如果不生成LineNumberTable属性，对程序运行的最主要的影响就是在抛出异常时，堆栈中将不会显示出错的行号，并在调试程序的时候，无法按照源码来设置断点。
        5.LocalVarableTable 属性
            用于描述栈帧中局部变量表中的变量与java源码中定义的变量之间的关系。
        6. SourceFile属性
            用于记录生成这个文件的源码文件名称。可以通过javac的-g:none或者-g:source选项来要求关闭或者生成这项信息。
        7.ConstantValue属性
            通知虚拟机自动为静态变量赋值。只有被static关键字修饰的变量(类变量)才会使用这项属性。
        8.innerClass属性
            用于记录内部类和宿主类之间的关联。
        9.Deprecate及Synthetic属性
            Deprecate表示某个类，字段或方法，已经不被程序作者定位不再推荐使用。通过注解配置
            Synthetic 代表此字段或方法并不是由java源代码直接生成的，二十由编译器自行添加的。
    Class文件结构的发展：
        见表JDK1.5 新添加的属性。

