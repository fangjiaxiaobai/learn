

//拥有自动垃圾回收、一个包系统、函数作为一等公民、词法作用域、系统调用接口、只读的UTF8字符串等。

//没有隐式的数值转换，没有构造函数和析构函数，没有运算符重载，没有默认参数，也没有继承，没有泛型，没有异常，没有宏，没有函数修饰，更没有线程局部存储


//Go语言的标准库（通常被称为语言自带的电池），提供了清晰的构建模块和公共接口，包含I/O操作、文本处理、图像、密码学、网络和分布式应用程序等，并支持许多标准化的文件格式和编解码协议

// Go语言的面向对象机制与一般语言不同。它没有类层次结构，甚至可以说没有类；仅仅通过组合（而不是继承）简单的对象来构建复杂的对象。方法不仅可以定义在结构体上, 而且可以定义在任何用户自定义的类型上；并且具体类型和抽象类型（接口）之间的关系是隐式的，所以很多类型的设计者可能并不知道该类型到底实现了哪些接口。
/***
 * 第一个GO程序，hello world
 *	1. go run hello.go 运行
 *  2. go build hello.go  编译程序。编程完是exe。
 */
package main //main 包比较特殊。它定义了一个独立可执行的程序，而不是一个库。

import "fmt" //引入fmt包，作用格式化输出，接收输入的函数。
//import 声明必须跟在文件的 package 声明之后。

func main(){
	fmt.Println("Hello World","fangjiaxiaobai 第一个go程序");
}
///Go语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。实际上，编译器会主动把特定符号后的换行符转换为分号, 因此换行符添加的位置会影响Go代码的正确解析
//Go语言在代码格式上采取了很强硬的态度。 gofmt工具把代码格式化为标准式12，并且 go 工具中的 fmt 子命令会对指定包, 否则默认为当前目录, 中所有.go源文件应用 gofmt 命 令。

//很多文本编辑器都可以配置为保存文件时自动执行 gofmt ，这样你的源代码总会被恰当地格式化。还有个相关的工具， goimports ，可以根据代码需要, 自动地添加或删除 import 声明。这个工具并没有包含在标准的分发包中，可以用下面的命令安装:go get golang.org/x/tools/cmd/goimports



// 接下来学习：交互。
// demo2-command.go. 命令行参数。

